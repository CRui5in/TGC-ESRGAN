# general settings
name: train_TGSRx4plus_400k_B12G4
model_type: TGSRModel
scale: 4
num_gpu: auto  # auto: can infer from your visible devices automatically
manual_seed: 0

# ----------------- options for synthesizing training data in TGSRModel ----------------- #
# USM the ground-truth
l1_gt_usm: True
percep_gt_usm: True
gan_gt_usm: False

# the first degradation process
resize_prob: [0.2, 0.7, 0.1]  # up, down, keep
resize_range: [0.4, 1.1]
gaussian_noise_prob: 0.5
noise_range: [1, 15]
poisson_scale_range: [0.05, 1.5]
gray_noise_prob: 0.4
jpeg_range: [40, 95]

# the second degradation process
second_blur_prob: 0.8
resize_prob2: [0.3, 0.4, 0.3]  # up, down, keep
resize_range2: [0.5, 1.0]
gaussian_noise_prob2: 0.5
noise_range2: [1, 10]
poisson_scale_range2: [0.05, 1.2]
gray_noise_prob2: 0.4
jpeg_range2: [45, 95]


gt_size: 512
queue_size: 144  # 减小队列大小以减少内存使用

# -------------- CLIP text encoder settings -------------- #
text_encoder:
  name: /root/autodl-tmp/clip-vit-base-patch32
  text_dim: 512
  freeze: false  # 解冻CLIP编码器让它适应SR任务

# dataset and data loader settings
datasets:
  train:
    name: TGSR_train
    type: TGSRDataset
    dataroot_gt: /root/autodl-tmp/tgsr_dataset_hr_only/train/hr
    text_file: /root/autodl-tmp/tgsr_dataset_hr_only/train_captions.json
    io_backend:
      type: disk

    blur_kernel_size: 7
    kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
    kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
    sinc_prob: 0.1
    blur_sigma: [0.1, 1.5]
    betag_range: [0.5, 2.5]
    betap_range: [1, 1.5]

    blur_kernel_size2: 7
    kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
    kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
    sinc_prob2: 0.1
    blur_sigma2: [0.1, 1.0]
    betag_range2: [0.5, 2.0]
    betap_range2: [1, 1.3]

    final_sinc_prob: 0.4

    gt_size: 512
    use_hflip: False
    use_rot: False

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 3  
    batch_size_per_gpu: 1  
    dataset_enlarge_ratio: 1
    prefetch_mode: cuda  # 使用CUDA进行预取
    pin_memory: true  # 启用pin_memory加速数据传输

  val:
    name: TGSR_val
    type: TGSRDataset
    dataroot_gt: /root/autodl-tmp/tgsr_dataset_hr_only/val/hr
    text_file: /root/autodl-tmp/tgsr_dataset_hr_only/val_captions.json
    io_backend:
      type: disk
    gt_size: 512
    use_hflip: False
    use_rot: False
    num_worker_per_gpu: 2
    batch_size_per_gpu: 1

# network structures
# SR网络 - 使用标准RRDBNet
network_g:
  type: RRDBNet
  num_in_ch: 3
  num_out_ch: 3
  num_feat: 64
  num_block: 23
  num_grow_ch: 32
  scale: 4

# 文本引导网络 - 使用ControlNet风格
network_t:
  type: TextGuidanceNet
  num_feat: 64
  text_dim: 512
  num_blocks: 6
  num_heads: 8
  with_position: false

# 判别器网络
network_d:
  type: UNetDiscriminatorSN
  num_in_ch: 3
  num_feat: 64
  skip_connection: True

# path
path:
  # 预训练权重
  pretrain_network_g: /root/autodl-tmp/TGSR/RealESRNet_x4plus.pth
  param_key_g: params_ema
  strict_load_g: true
  resume_state: ~
  experiments_root: /root/autodl-tmp/TGSR/experiments

# training settings
train:
  ema_decay: 0.999
  
  # 分阶段训练
  stage_train: true
  stages:
    - name: "pretrain_t"  # 第一阶段：预训练文本引导网络
      iters: 20000  # 缩短预训练阶段
      freeze_modules: ["net_d"]  # 只冻结判别器，让生成器可以适应文本引导
      lr_g: !!float 5e-5
      lr_d: !!float 0
      lr_t: !!float 1e-4
    - name: "joint_light"  # 第二阶段：轻度联合训练
      iters: 50000
      freeze_modules: []
      lr_g: !!float 1e-5  # 生成器使用较小学习率
      lr_d: !!float 5e-5
      lr_t: !!float 5e-5
    - name: "joint_full"   # 第三阶段：完全联合训练
      iters: 400000
      freeze_modules: []
      lr_g: !!float 1e-4
      lr_d: !!float 1e-4
      lr_t: !!float 1e-4
  
  optim_g:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_d:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_t:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [400000]
    gamma: 0.5

  total_iter: 470000
  warmup_iter: 1000  # 使用warmup

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean
  # perceptual loss (content and style losses)
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      # before relu
      'conv1_2': 0.1
      'conv2_2': 0.1
      'conv3_4': 1
      'conv4_4': 1
      'conv5_4': 1
    vgg_type: vgg19
    use_input_norm: true
    perceptual_weight: !!float 1.0
    style_weight: 0
    range_norm: false
    criterion: l1
  # gan loss
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 1e-1

  net_d_iters: 1
  net_d_init_iters: 0
  
  cri_attention:
    type: TextRegionAttentionLoss
    loss_weight: 0.5
    reduction: mean
  
  # ControlNet风格的控制特征损失
  cri_control:
    type: ControlFeatureLoss
    loss_weight: 1.0
    reduction: mean

  # 特征维度，用于特征投影
  feat_dim: 64  # 根据RRDBNet的实际特征维度调整

# validation settings
val:
  val_freq: !!float 5e3  # 减少验证频率，提高训练效率
  save_img: true
  save_attention_maps: true
  compare_with_unguided: true
  save_comparison: true
  compare_metrics: true
  metrics:
    psnr: # metric name
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false
    ssim:
      type: calculate_ssim
      crop_border: 4
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 1e4
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500 